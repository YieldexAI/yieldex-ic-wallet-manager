// smart_wallet_manager.did

type PermissionsId = text;
type TokenAddress = text;
type ProtocolAddress = text;

// Protocol type definition
type Protocol = record {
    name: text;
    address: text;
};

// Token type definition 
type Token = record {
    name: text;
    address: text;
};

type TransferLimit = record {
    token_address: TokenAddress;
    daily_limit: nat64;
    max_tx_amount: nat64;
};

// ðŸ†• Protocol Permission type for AAVE integration (Sprint 2)
type ProtocolPermission = record {
    protocol_address: text;
    allowed_functions: vec text;
    max_amount_per_tx: opt nat64;
    daily_limit: opt nat64;
    total_used_today: nat64;
    last_reset_date: nat64;
};

type Permissions = record {
    id: PermissionsId;
    owner: principal;
    whitelisted_protocols: vec Protocol;
    whitelisted_tokens: vec Token;
    transfer_limits: vec TransferLimit;
    protocol_permissions: vec ProtocolPermission; // ðŸ†• Protocol permissions for AAVE integration
    created_at: nat64;
    updated_at: nat64;
};

type CreatePermissionsRequest = record {
    whitelisted_protocols: vec Protocol;
    whitelisted_tokens: vec Token;
    transfer_limits: vec TransferLimit;
    protocol_permissions: opt vec ProtocolPermission; // ðŸ†• Protocol permissions when creating
};

type UpdatePermissionsRequest = record {
    permissions_id: PermissionsId;
    whitelisted_protocols: opt vec Protocol;
    whitelisted_tokens: opt vec Token;
    transfer_limits: opt vec TransferLimit;
};

service : {
    // Generates and returns the EVM address associated with the caller's Principal ID.
    // If an address already exists for the caller, it returns the existing address.
    // If not, it generates a new one, stores it, and returns it.
    // This is an update call as it potentially modifies state and calls t-ECDSA.
    "generate_evm_address": () -> (variant { Ok: text; Err: text });

    // Returns the EVM address associated with the caller's Principal ID, if one exists.
    "get_evm_address": () -> (variant { Ok: text; Err: text }) query;

    // Verifies if a user (Principal) has an associated EVM address stored.
    // This is a query call.
    "verify_user": (user: principal) -> (variant { Ok: bool; Err: text }) query;

    // Permissions CRUD operations (only accessible by the Principal that owns the EVM address)
    "create_permissions": (req: CreatePermissionsRequest) -> (variant { Ok: Permissions; Err: text });
    "get_permissions": (permissions_id: PermissionsId) -> (variant { Ok: Permissions; Err: text }) query;
    "get_all_permissions": () -> (variant { Ok: vec Permissions; Err: text }) query;
    "update_permissions": (req: UpdatePermissionsRequest) -> (variant { Ok: Permissions; Err: text });
    "delete_permissions": (permissions_id: PermissionsId) -> (variant { Ok: bool; Err: text });

    // ðŸ†• Protocol permission management (Sprint 2)
    "check_protocol_permission": (permissions_id: text, protocol_address: text, function_name: text, amount: nat64) -> (variant { Ok: bool; Err: text }) query;
    "update_protocol_permission": (permissions_id: text, protocol_permission: ProtocolPermission) -> (variant { Ok: bool; Err: text });
    "update_daily_usage": (permissions_id: text, protocol_address: text, amount_used: nat64) -> (variant { Ok: bool; Err: text });

    // Get balance of an ETH account
    "get_eth_balance": (address: opt text) -> (variant { Ok: text; Err: text });

    // Get balance of a USDC account
    "get_usdc_balance": (address: opt text) -> (variant { Ok: text; Err: text });

    // Get balance of a LINK account
    "get_link_balance": (address: opt text) -> (variant { Ok: text; Err: text });

    // Transfer LINK tokens to a specified address
    "transfer_link_tokens": (to_address: text, amount: text) -> (variant { Ok: text; Err: text });

    // Transfer LINK tokens with human-readable amount (e.g. "1.5" for 1.5 LINK)
    "transfer_link_human_readable": (to_address: text, amount_human: text) -> (variant { Ok: text; Err: text });

    // Send ETH to a specified address
    "send_eth_tokens": (to_address: text, amount_wei: text) -> (variant { Ok: text; Err: text });

    // Send ETH with human-readable amount (e.g. "0.001" for 0.001 ETH)
    "send_eth_human_readable": (to_address: text, amount_ether: text) -> (variant { Ok: text; Err: text });

    // Approve USDC for a spender
    "approve_usdc_spending": (spender_address: text, amount: text) -> (variant { Ok: text; Err: text });

    // Approve USDC spending with human-readable amount (e.g. "100.50" for 100.50 USDC)
    "approve_usdc_human_readable": (spender_address: text, amount_human: text) -> (variant { Ok: text; Err: text });

    // Get current USDC allowance for a spender
    "get_usdc_allowance_info": (owner_address: opt text, spender_address: text) -> (variant { Ok: text; Err: text });

    // Revoke USDC approval (set allowance to 0)
    "revoke_usdc_spending_approval": (spender_address: text) -> (variant { Ok: text; Err: text });

    // Get balance of a WETH account
    "get_weth_balance": (address: opt text) -> (variant { Ok: text; Err: text });

    // Approve WETH for Uniswap V2 Router (simplified)
    "approve_weth_for_uniswap_trading": (amount: text) -> (variant { Ok: text; Err: text });

    // Approve WETH spending for any address
    "approve_weth_spending": (spender_address: text, amount: text) -> (variant { Ok: text; Err: text });

    // Approve WETH spending with human-readable amount (e.g. "1.5" for 1.5 WETH)
    "approve_weth_human_readable": (spender_address: text, amount_human: text) -> (variant { Ok: text; Err: text });

    // Get current WETH allowance for a spender
    "get_weth_allowance_info": (owner_address: opt text, spender_address: text) -> (variant { Ok: text; Err: text });

    // Revoke WETH approval (set allowance to 0)
    "revoke_weth_spending_approval": (spender_address: text) -> (variant { Ok: text; Err: text });

    // Wrap ETH into WETH tokens
    "wrap_eth_tokens": (amount: text) -> (variant { Ok: text; Err: text });

    // Wrap ETH with human-readable amount (e.g. "0.1" for 0.1 ETH)
    "wrap_eth_human_readable": (amount_human: text) -> (variant { Ok: text; Err: text });

    // Unwrap WETH back to ETH
    "unwrap_weth_tokens": (amount: text) -> (variant { Ok: text; Err: text });

    // Get balance of a WETH account for wrapping
    "get_weth_balance_for_wrapping": (address: opt text) -> (variant { Ok: text; Err: text });

    // Unwrap WETH with human-readable amount (e.g. "0.1" for 0.1 WETH)
    "unwrap_weth_human_readable": (amount_human: text) -> (variant { Ok: text; Err: text });

    // --- Message Signing Methods ---

    // Sign an arbitrary message using threshold ECDSA
    "sign_arbitrary_message": (message: text) -> (variant { Ok: text; Err: text });

    // Sign a message and return both signature and signer address
    "sign_message_with_signer_address": (message: text) -> (variant { Ok: text; Err: text });

    // Sign a 32-byte hash directly
    "sign_32_byte_hash": (hash_hex: text) -> (variant { Ok: text; Err: text });

    // ðŸ†• AAVE operations (Sprint 2)
    "get_aave_link_user_balance": (address: opt text) -> (variant { Ok: text; Err: text });
    "supply_link_to_aave_secured": (amount_human: text, permissions_id: text) -> (variant { Ok: text; Err: text });
    "withdraw_link_from_aave_secured": (amount_human: text, permissions_id: text) -> (variant { Ok: text; Err: text });

}
